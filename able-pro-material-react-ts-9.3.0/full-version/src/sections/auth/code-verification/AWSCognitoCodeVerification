import { useNavigate } from 'react-router-dom';

// material-ui
import { useTheme } from '@mui/material/styles';
import Alert from '@mui/material/Alert';
import Button from '@mui/material/Button';
import FormHelperText from '@mui/material/FormHelperText';
import Grid from '@mui/material/Grid2';
import InputLabel from '@mui/material/InputLabel';
import Stack from '@mui/material/Stack';
import Typography from '@mui/material/Typography';

// third-party
import { Formik } from 'formik';
import OtpInput from 'react-otp-input';
import * as Yup from 'yup';

// project-imports
import { openSnackbar } from 'api/snackbar';
import AnimateButton from 'components/@extended/AnimateButton';
import { ThemeMode } from 'config';
import useAuth from 'hooks/useAuth';
import useScriptRef from 'hooks/useScriptRef';

// types
import { SnackbarProps } from 'types/snackbar';

// assets
import { Warning2 } from 'iconsax-react';

// ============================|| AWS COGNITO - CODE VERIFICATION ||============================ //

export default function AuthCodeVerification() {
  const { codeVerification, resendConfirmationCode } = useAuth();
  const scriptedRef = useScriptRef();
  const theme = useTheme();
  const navigate = useNavigate();

  return (
    <Formik
      initialValues={{
        otp: '',
        submit: null
      }}
      validationSchema={Yup.object().shape({
        otp: Yup.string().max(255).required('Verification Code is required')
      })}
      onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {
        try {
          // set code verification method here
          await codeVerification(values.otp)
            .then(() => {
              setSubmitting(false);
              openSnackbar({
                open: true,
                message: 'Account verify successfully.',
                variant: 'alert',
                alert: {
                  color: 'success'
                }
              } as SnackbarProps);
              setTimeout(() => {
                navigate('/login', { replace: true });
              }, 1500);

              // WARNING: do not set any formik state here as formik might be already destroyed here. You may get following error by doing so.
              // Warning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application.
              // To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.
              // github issue: https://github.com/formium/formik/issues/2430
            })
            .catch((err: any) => {
              setStatus({ success: false });
              setErrors({ submit: err || JSON.stringify(err) });
              setSubmitting(false);
            });
        } catch (err: any) {
          if (scriptedRef.current) {
            setStatus({ success: false });
            setErrors({ submit: err.message });
            setSubmitting(false);
          }
        }
      }}
    >
      {({ errors, handleSubmit, touched, values, setFieldValue, isSubmitting }) => (
        <form noValidate onSubmit={handleSubmit}>
          <Grid container spacing={3}>
            <Grid size={12}>
              <Stack
                sx={(theme) => ({
                  gap: 1,
                  '& input:focus-visible': {
                    outline: 'none !important',
                    borderColor: `${theme.palette.primary.main} !important`,
                    boxShadow: `${theme.customShadows.primary} !important`
                  }
                })}
              >
                <InputLabel htmlFor="verification-code">Enter Verification Code</InputLabel>
                <OtpInput
                  value={values.otp}
                  onChange={(otp) => setFieldValue('otp', otp)}
                  inputType="tel"
                  shouldAutoFocus
                  renderInput={(props) => <input {...props} />}
                  numInputs={4}
                  containerStyle={{ justifyContent: 'space-between', margin: -8, marginTop: 1 }}
                  inputStyle={{
                    width: '100%',
                    margin: '8px',
                    padding: '10px',
                    border: '1px solid',
                    outline: 'none',
                    borderRadius: 4,
                    borderColor: touched.otp && errors.otp ? theme.palette.error.main : theme.palette.divider
                  }}
                />
              </Stack>
              {touched.otp && errors.otp && (
                <FormHelperText error id="helper-text-password-reset">
                  {errors.otp}
                </FormHelperText>
              )}
            </Grid>
            {touched && errors && errors.submit && (
              <Grid size={12}>
                <Alert color="error" variant="border" sx={{ color: 'error.main' }} icon={<Warning2 variant="Bold" />}>
                  {errors?.submit}
                </Alert>
              </Grid>
            )}
            <Grid size={12}>
              <AnimateButton>
                <Button disableElevation disabled={isSubmitting} fullWidth size="large" type="submit" variant="contained" color="primary">
                  Verify Account
                </Button>
              </AnimateButton>
            </Grid>
            <Grid size={12}>
              <Stack direction="row" sx={{ alignItems: 'baseline', justifyContent: 'space-between' }}>
                <Typography>Did not receive the email? Check spam folder or</Typography>
                {/* need to impletement resend code */}
                <Typography
                  onClick={resendConfirmationCode}
                  variant="body1"
                  sx={{ textDecoration: 'none', cursor: 'pointer' }}
                  color="primary"
                >
                  Resend code
                </Typography>
              </Stack>
            </Grid>
          </Grid>
        </form>
      )}
    </Formik>
  );
}
